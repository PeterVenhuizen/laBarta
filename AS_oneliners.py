#!/usr/bin/env python

"""
Take the AS landscript generated by gtf2AS.py and a list of
reference isoforms for the genes and turn the AS events into
oneliners for each transcript. 
"""

import argparse
from natsort import natsorted
from fileParser import parse_GTF

def AS_oneliners(gtf_file, gtf2AS, ref_file):

	# Get the transcripts GTF annotation
	gtf = parse_GTF(gtf_file, select_feature="exon", get_introns=False)
	groups = {}
	for t in gtf:
		g_id = t.split('.')[0]
		try: groups[g_id].append(t)
		except KeyError: groups[g_id] = [t]

	# References
	ref_trs = { line.rstrip().split('.')[0]: line.rstrip() for line in open(ref_file) }

	# Parse AS events
	AS = {}
	for line in open(gtf2AS):
		c, source, feature, start, end, score, strand, frame, attributes = line.rstrip().split('\t')
		attr = {}
		for a in attributes.split(';'):
			if len(a):
				attr_name, attr_value = a.split(' "')
				attr[attr_name.strip()] = attr_value.replace('\"', '')

		for t_id in attr["transcripts"].split(','):
			g_id = t_id.split('.')[0]
			if g_id not in AS: AS[g_id] = {}
			try: AS[g_id][t_id].append(attr["transcript_id"])
			except KeyError: AS[g_id][t_id] = [attr["transcript_id"]]

	for g_id in natsorted(AS):

		try:
			ref_exons = [ [s, e] for s, e in gtf[ref_trs[g_id]]['exons'] ]

			for t_id in AS[g_id]:
				oneliner = []
				for event in AS[g_id][t_id]:
					cols = event.split(':')
					AS_code = cols[0]
					if AS_code == "ES":
						try:
							exon_nr = ref_exons.index(map(int, cols[2].split('-')))
							oneliner.append( '{}:{}'.format(exon_nr, AS_code) )
						except ValueError: pass
					elif AS_code == "IR":

						print g_id, ref_trs[g_id], ref_exons
						print t_id, cols[2].split('-')
						raw_input()

					elif AS_code in ["A3", "A5"]:
						pass

		except KeyError:
			pass # FIX THIS LATER SO GENES WITHOUT REFERENCE ARE INCLUDED


if __name__ == '__main__':

	parser = argparse.ArgumentParser(description=__doc__)
	parser.add_argument('-g', '--gtf', required=True, help="Transcripts in GTF format.")
	parser.add_argument('--AS', required=True, help="AS landscape from gtf2AS.py")
	parser.add_argument('-r', '--reference-trs', required=True, help="List of reference transcripts for the input GTF genes.")
	args = parser.parse_args()

	AS_oneliners(args.gtf, args.AS, args.reference_trs)